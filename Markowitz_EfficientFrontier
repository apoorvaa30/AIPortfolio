{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uv4rmHiIwl2L",
        "outputId": "4b5a1d1a-a629-433e-b753-858f938d58a6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: yfinance in /usr/local/lib/python3.7/dist-packages (0.1.85)\n",
            "Requirement already satisfied: numpy>=1.15 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.21.6)\n",
            "Requirement already satisfied: lxml>=4.5.1 in /usr/local/lib/python3.7/dist-packages (from yfinance) (4.9.1)\n",
            "Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.3.5)\n",
            "Requirement already satisfied: multitasking>=0.0.7 in /usr/local/lib/python3.7/dist-packages (from yfinance) (0.0.11)\n",
            "Requirement already satisfied: requests>=2.26 in /usr/local/lib/python3.7/dist-packages (from yfinance) (2.28.1)\n",
            "Requirement already satisfied: appdirs>=1.4.4 in /usr/local/lib/python3.7/dist-packages (from yfinance) (1.4.4)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2022.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.24.0->yfinance) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.24.0->yfinance) (1.15.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (1.24.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2022.9.24)\n",
            "Requirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.26->yfinance) (2.1.1)\n"
          ]
        }
      ],
      "source": [
        "!pip install yfinance"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "# from sklearn.linear_model import LinearRegression\n",
        "# from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "import numpy as np\n",
        "import time"
      ],
      "metadata": {
        "id": "-VKCbTnpxHz7"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "user_selection = input(\"Do you want to randomnly analyze stocks listed on NYSE or analyze stocks per your choice ? Enter 0 or 1 accordingly ?\")\n",
        "if user_selection:\n",
        "  stock_tickers_user = input(\"Enter the stock tickers separated by comma :\")\n",
        "  tickers_to_analyze = stock_tickers_user.split(\",\")\n",
        "else:\n",
        "  how_many_stocks = input(\"How many stocks you want to analyse? Enter atleast 10 and max 2659\\n\")\n",
        "  correct = False\n",
        "  while not correct:\n",
        "      try:\n",
        "          how_many_stocks = int(how_many_stocks)\n",
        "          if how_many_stocks > 2659 or how_many_stocks < 2:\n",
        "              raise ValueError\n",
        "          correct = True\n",
        "      except: \n",
        "          print(\"Please enter a correct number. \")\n",
        "          how_many_stocks = input(\"How many stocks you want to analyse? Enter atleast 2 and max 2659..\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SdRwlQioxbeU",
        "outputId": "9122f98f-e9c9-41f6-babc-e44692ab2a96"
      },
      "execution_count": 4,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Do you want to randomnly analyze stocks listed on NYSE or analyze stocks per your choice ? Enter 0 or 1 accordingly ?1\n",
            "Enter the stock tickers separated by comma :AMZN\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv(\"./sample_data/nyselisted_clean_csv.csv\")"
      ],
      "metadata": {
        "id": "V1zZGzzmx3Al"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "X4fTkBAR3K7V",
        "outputId": "22deb364-e09a-4b66-ef24-50a62959e356"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Symbol                                               Name Last Sale  \\\n",
              "0      A             Agilent Technologies Inc. Common Stock  $136.08    \n",
              "1     AA                    Alcoa Corporation Common Stock    $42.40    \n",
              "2    AAC  Ares Acquisition Corporation Class A Ordinary ...    $9.98    \n",
              "3   AAIC      Arlington Asset Investment Corp Class A (new)    $3.01    \n",
              "4   AAIN  Arlington Asset Investment Corp 6.000% Senior ...   $23.00    \n",
              "\n",
              "   Net Change % Change    Market Cap        Country  IPO Year      Volume  \\\n",
              "0      1.6200    1.21%  4.028520e+10  United States    1999.0   1272088.0   \n",
              "1      4.7000   12.47%  7.502136e+09            NaN    2016.0  11098440.0   \n",
              "2      0.0100    0.10%  1.247500e+09            NaN    2021.0     98279.0   \n",
              "3      0.0500    1.69%  8.696177e+07  United States       NaN     72756.0   \n",
              "4      0.0001    0.00%  0.000000e+00  United States       NaN       764.0   \n",
              "\n",
              "        Sector                       Industry  \n",
              "0  Industrials            Electrical Products  \n",
              "1  Industrials             Metal Fabrications  \n",
              "2      Finance              Business Services  \n",
              "3  Real Estate  Real Estate Investment Trusts  \n",
              "4      Finance     Finance/Investors Services  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6be938cf-bcb1-496a-bb7d-e386b9efe625\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Symbol</th>\n",
              "      <th>Name</th>\n",
              "      <th>Last Sale</th>\n",
              "      <th>Net Change</th>\n",
              "      <th>% Change</th>\n",
              "      <th>Market Cap</th>\n",
              "      <th>Country</th>\n",
              "      <th>IPO Year</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Sector</th>\n",
              "      <th>Industry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A</td>\n",
              "      <td>Agilent Technologies Inc. Common Stock</td>\n",
              "      <td>$136.08</td>\n",
              "      <td>1.6200</td>\n",
              "      <td>1.21%</td>\n",
              "      <td>4.028520e+10</td>\n",
              "      <td>United States</td>\n",
              "      <td>1999.0</td>\n",
              "      <td>1272088.0</td>\n",
              "      <td>Industrials</td>\n",
              "      <td>Electrical Products</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AA</td>\n",
              "      <td>Alcoa Corporation Common Stock</td>\n",
              "      <td>$42.40</td>\n",
              "      <td>4.7000</td>\n",
              "      <td>12.47%</td>\n",
              "      <td>7.502136e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2016.0</td>\n",
              "      <td>11098440.0</td>\n",
              "      <td>Industrials</td>\n",
              "      <td>Metal Fabrications</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AAC</td>\n",
              "      <td>Ares Acquisition Corporation Class A Ordinary ...</td>\n",
              "      <td>$9.98</td>\n",
              "      <td>0.0100</td>\n",
              "      <td>0.10%</td>\n",
              "      <td>1.247500e+09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021.0</td>\n",
              "      <td>98279.0</td>\n",
              "      <td>Finance</td>\n",
              "      <td>Business Services</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AAIC</td>\n",
              "      <td>Arlington Asset Investment Corp Class A (new)</td>\n",
              "      <td>$3.01</td>\n",
              "      <td>0.0500</td>\n",
              "      <td>1.69%</td>\n",
              "      <td>8.696177e+07</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>72756.0</td>\n",
              "      <td>Real Estate</td>\n",
              "      <td>Real Estate Investment Trusts</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AAIN</td>\n",
              "      <td>Arlington Asset Investment Corp 6.000% Senior ...</td>\n",
              "      <td>$23.00</td>\n",
              "      <td>0.0001</td>\n",
              "      <td>0.00%</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>United States</td>\n",
              "      <td>NaN</td>\n",
              "      <td>764.0</td>\n",
              "      <td>Finance</td>\n",
              "      <td>Finance/Investors Services</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6be938cf-bcb1-496a-bb7d-e386b9efe625')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6be938cf-bcb1-496a-bb7d-e386b9efe625 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6be938cf-bcb1-496a-bb7d-e386b9efe625');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jo7xeFUj3Vk6",
        "outputId": "faeb1de3-9760-45ec-cb8d-3258a4a044d3"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3097 entries, 0 to 3096\n",
            "Data columns (total 11 columns):\n",
            " #   Column      Non-Null Count  Dtype  \n",
            "---  ------      --------------  -----  \n",
            " 0   Symbol      2659 non-null   object \n",
            " 1   Name        2659 non-null   object \n",
            " 2   Last Sale   2659 non-null   object \n",
            " 3   Net Change  2659 non-null   float64\n",
            " 4   % Change    2659 non-null   object \n",
            " 5   Market Cap  2659 non-null   float64\n",
            " 6   Country     1963 non-null   object \n",
            " 7   IPO Year    1689 non-null   float64\n",
            " 8   Volume      2659 non-null   float64\n",
            " 9   Sector      2472 non-null   object \n",
            " 10  Industry    2472 non-null   object \n",
            "dtypes: float64(4), object(7)\n",
            "memory usage: 266.3+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "tickers = list(data['Symbol'].unique())\n",
        "if not user_selection: #randomly pick nyse listed stocks\n",
        "  tickers_to_analyze = random.sample(tickers, how_many_stocks)\n",
        "print(tickers_to_analyze)\n",
        "tickers_not_found = []"
      ],
      "metadata": {
        "id": "SCyl6DRRynWe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a14fa68-25ea-4511-a8c7-9ab8791322c5"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['AMZN']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def make_X_and_Y(close_prices,period = 6):\n",
        "    X = []\n",
        "    y = []\n",
        "    for i in range(len(close_prices)-period):\n",
        "        X.append(close_prices[i:i+period])\n",
        "        y.append(close_prices[i+period])\n",
        "    return X,y"
      ],
      "metadata": {
        "id": "xhHVCKWjy88P"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "def return_model(X,y):\n",
        "    rf = RandomForestRegressor()\n",
        "    rf_grid_param = {\n",
        "    'n_estimators' : [50,100,150,200],\n",
        "    'criterion': ['squared_error', 'absolute_error'],\n",
        "    'max_depth' : range(2,10,1),\n",
        "    }\n",
        "    grid_search = GridSearchCV(estimator=rf,\n",
        "                               param_grid=rf_grid_param,\n",
        "                               cv=5,\n",
        "                               n_jobs =-1,\n",
        "                               verbose = 2)\n",
        "    grid_search.fit(X,y)\n",
        "    print(\"best parameters\", grid_search.best_params_)\n",
        "    print(\"best score: \", grid_search.best_score_)\n",
        "\n",
        "    model = RandomForestRegressor( n_estimators = grid_search.best_params_['n_estimators'],\n",
        "                                   criterion = grid_search.best_params_['criterion'], \n",
        "                                   max_depth = grid_search.best_params_['max_depth'],  \n",
        "                                 )\n",
        "    model.fit(X,y)\n",
        "    return model"
      ],
      "metadata": {
        "id": "bVmQql8IzKBl"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "period = 6\n",
        "predicted_prices_for_tomorrow = []\n",
        "today_prices = []\n",
        "volatility_for_stocks = []\n",
        "new_symbols_for_df = []\n",
        "today = \"2022-11-04\""
      ],
      "metadata": {
        "id": "yvqmzrcozQuQ"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for ticker in tickers_to_analyze:\n",
        "  new_symbols_for_df.append(ticker)\n",
        "  train_data = yf.download(ticker, start=\"2017-10-03\", end=\"2022-10-03\")\n",
        "  test_data = yf.download(ticker, start=\"2022-10-03\", end=\"2022-11-03\") \n",
        "  close_prices_train = train_data.Close\n",
        "  daily_returns = close_prices_train.pct_change()\n",
        "  daily_returns.dropna(inplace=True)\n",
        "  daily_returns_volatility = daily_returns.std()\n",
        "  volatility_for_stocks.append(daily_returns_volatility)\n",
        "  ## Train the algo\n",
        "  features, dependent_variable = make_X_and_Y(list(close_prices_train))\n",
        "  features = np.array(features)\n",
        "  dependent_variable = np.array(dependent_variable)\n",
        "  model = return_model(features, dependent_variable)\n",
        "  ## Test the algo\n",
        "  close_prices_test = test_data.Close\n",
        "  result=[]\n",
        "  for i in range(len(close_prices_test)-period):\n",
        "    predicted_price = model.predict(np.array(close_prices_test[i:i+period]).reshape(1,-1))\n",
        "    result.append([close_prices_test[0:len(close_prices_test)].index[i+period], predicted_price[0], close_prices_test[i+period]])\n",
        "  full_data = pd.DataFrame(data=result, columns=['Timestamp', 'Predicted Price', 'Actual Price'])\n",
        "  full_data "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FNogNfvwzdvd",
        "outputId": "8f76d2fd-2163-4d8a-9e29-4a8b09b6e87f"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "Fitting 5 folds for each of 64 candidates, totalling 320 fits\n",
            "best parameters {'criterion': 'squared_error', 'max_depth': 7, 'n_estimators': 50}\n",
            "best score:  0.875223864743845\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "full_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "UhrwejXXVFnG",
        "outputId": "3ad5a850-f88b-40bb-b5b7-1283109b8bd8"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Timestamp  Predicted Price  Actual Price\n",
              "0  2022-10-11       114.866183    112.209999\n",
              "1  2022-10-12       111.043675    112.900002\n",
              "2  2022-10-13       111.123332    112.529999\n",
              "3  2022-10-14       111.109016    106.900002\n",
              "4  2022-10-17       107.881969    113.790001\n",
              "5  2022-10-18       113.665131    116.360001\n",
              "6  2022-10-19       116.054947    115.070000\n",
              "7  2022-10-20       115.110845    115.250000\n",
              "8  2022-10-21       115.307520    119.320000\n",
              "9  2022-10-24       120.006017    119.820000\n",
              "10 2022-10-25       119.375578    120.599998\n",
              "11 2022-10-26       119.482210    115.660004\n",
              "12 2022-10-27       116.700953    110.959999\n",
              "13 2022-10-28       110.608398    103.410004\n",
              "14 2022-10-31       105.244592    102.440002\n",
              "15 2022-11-01       105.513890     96.790001\n",
              "16 2022-11-02        99.117430     92.120003"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ce4d0cc-2d02-4061-980f-0667c7f2f7db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Predicted Price</th>\n",
              "      <th>Actual Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-10-11</td>\n",
              "      <td>114.866183</td>\n",
              "      <td>112.209999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-10-12</td>\n",
              "      <td>111.043675</td>\n",
              "      <td>112.900002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-10-13</td>\n",
              "      <td>111.123332</td>\n",
              "      <td>112.529999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-10-14</td>\n",
              "      <td>111.109016</td>\n",
              "      <td>106.900002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-10-17</td>\n",
              "      <td>107.881969</td>\n",
              "      <td>113.790001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2022-10-18</td>\n",
              "      <td>113.665131</td>\n",
              "      <td>116.360001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2022-10-19</td>\n",
              "      <td>116.054947</td>\n",
              "      <td>115.070000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2022-10-20</td>\n",
              "      <td>115.110845</td>\n",
              "      <td>115.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2022-10-21</td>\n",
              "      <td>115.307520</td>\n",
              "      <td>119.320000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2022-10-24</td>\n",
              "      <td>120.006017</td>\n",
              "      <td>119.820000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2022-10-25</td>\n",
              "      <td>119.375578</td>\n",
              "      <td>120.599998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2022-10-26</td>\n",
              "      <td>119.482210</td>\n",
              "      <td>115.660004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2022-10-27</td>\n",
              "      <td>116.700953</td>\n",
              "      <td>110.959999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2022-10-28</td>\n",
              "      <td>110.608398</td>\n",
              "      <td>103.410004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2022-10-31</td>\n",
              "      <td>105.244592</td>\n",
              "      <td>102.440002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2022-11-01</td>\n",
              "      <td>105.513890</td>\n",
              "      <td>96.790001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2022-11-02</td>\n",
              "      <td>99.117430</td>\n",
              "      <td>92.120003</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ce4d0cc-2d02-4061-980f-0667c7f2f7db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1ce4d0cc-2d02-4061-980f-0667c7f2f7db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1ce4d0cc-2d02-4061-980f-0667c7f2f7db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install PyPortfolioOpt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ujdrUMD49BQx",
        "outputId": "138bc3a7-73e9-4fa9-dc27-f87b00b6782f"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting PyPortfolioOpt\n",
            "  Downloading pyportfolioopt-1.5.2-py3-none-any.whl (61 kB)\n",
            "\u001b[K     |████████████████████████████████| 61 kB 5.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy<2.0,>=1.12 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.21.6)\n",
            "Requirement already satisfied: cvxpy<2.0.0,>=1.1.10 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.2.1)\n",
            "Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.3.5)\n",
            "Requirement already satisfied: scipy<2.0,>=1.3 in /usr/local/lib/python3.7/dist-packages (from PyPortfolioOpt) (1.7.3)\n",
            "Requirement already satisfied: osqp>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from cvxpy<2.0.0,>=1.1.10->PyPortfolioOpt) (0.6.2.post0)\n",
            "Requirement already satisfied: ecos>=2 in /usr/local/lib/python3.7/dist-packages (from cvxpy<2.0.0,>=1.1.10->PyPortfolioOpt) (2.0.10)\n",
            "Requirement already satisfied: scs>=1.1.6 in /usr/local/lib/python3.7/dist-packages (from cvxpy<2.0.0,>=1.1.10->PyPortfolioOpt) (3.2.0)\n",
            "Requirement already satisfied: qdldl in /usr/local/lib/python3.7/dist-packages (from osqp>=0.4.1->cvxpy<2.0.0,>=1.1.10->PyPortfolioOpt) (0.1.5.post2)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.19->PyPortfolioOpt) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.19->PyPortfolioOpt) (2022.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.19->PyPortfolioOpt) (1.15.0)\n",
            "Installing collected packages: PyPortfolioOpt\n",
            "Successfully installed PyPortfolioOpt-1.5.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def getClosePrice(ticker):\n",
        "  price = yf.download(ticker, start=\"2017-11-03\", end=\"2022-11-03\")\n",
        "  price[ticker]=price['Close']\n",
        "  return price[ticker]\n",
        "\n",
        "close_price_dfs = []\n",
        "for ticker in ['UNH','XOM','JNJ','V','JPM','WMT','CVX','LLY','TSM','PG','MA','BAC','HD','PFE']:  # to replace this with tickers_to_analyze\n",
        "  close_price_df = getClosePrice(ticker)\n",
        "  close_price_dfs.append(close_price_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QIA-VzWd_mbE",
        "outputId": "54b76a8b-5cb8-48fa-a4a6-e909f2d30888"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n",
            "[*********************100%***********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "close_price_dfs_combined = pd.concat(close_price_dfs,join='outer',axis=1)\n",
        "close_price_dfs_combined"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "G4kgWYIW_riu",
        "outputId": "f3685dc3-c9a6-4782-9343-96d93c80db96"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   UNH         XOM         JNJ           V         JPM  \\\n",
              "Date                                                                     \n",
              "2017-11-03  212.869995   83.180000  140.080002  111.360001  101.410004   \n",
              "2017-11-06  212.119995   83.750000  139.759995  111.919998  100.779999   \n",
              "2017-11-07  212.699997   83.580002  139.770004  112.089996   98.750000   \n",
              "2017-11-08  210.770004   83.470001  141.320007  112.470001   97.639999   \n",
              "2017-11-09  211.559998   83.970001  140.350006  112.139999   97.629997   \n",
              "...                ...         ...         ...         ...         ...   \n",
              "2022-10-27  541.799988  107.550003  172.309998  204.289993  124.599998   \n",
              "2022-10-28  551.239990  110.699997  174.869995  209.339996  126.080002   \n",
              "2022-10-31  555.150024  110.809998  173.970001  207.160004  125.879997   \n",
              "2022-11-01  547.309998  111.910004  173.089996  206.929993  128.149994   \n",
              "2022-11-02  543.429993  109.610001  170.429993  200.949997  126.970001   \n",
              "\n",
              "                   WMT         CVX         LLY        TSM          PG  \\\n",
              "Date                                                                    \n",
              "2017-11-03   89.680000  114.989998   83.510002  42.189999   86.580002   \n",
              "2017-11-06   88.699997  117.040001   82.940002  42.430000   86.050003   \n",
              "2017-11-07   88.949997  117.239998   83.279999  42.509998   86.980003   \n",
              "2017-11-08   90.260002  116.669998   84.010002  42.430000   87.580002   \n",
              "2017-11-09   90.300003  117.239998   83.989998  41.639999   87.779999   \n",
              "...                ...         ...         ...        ...         ...   \n",
              "2022-10-27  140.729996  177.899994  356.329987  60.950001  131.880005   \n",
              "2022-10-28  142.509995  179.979996  359.899994  62.009998  135.220001   \n",
              "2022-10-31  142.330002  180.899994  362.089996  61.549999  134.669998   \n",
              "2022-11-01  141.690002  182.220001  352.579987  61.580002  134.880005   \n",
              "2022-11-02  140.750000  178.500000  354.959991  60.520000  132.940002   \n",
              "\n",
              "                    MA        BAC          HD        PFE  \n",
              "Date                                                      \n",
              "2017-11-03  149.289993  27.820000  164.389999  33.728653  \n",
              "2017-11-06  150.089996  27.750000  164.220001  33.510437  \n",
              "2017-11-07  149.970001  27.180000  163.660004  33.548386  \n",
              "2017-11-08  149.970001  26.790001  164.050003  33.529411  \n",
              "2017-11-09  149.289993  26.490000  163.270004  33.396584  \n",
              "...                ...        ...         ...        ...  \n",
              "2022-10-27  319.369995  35.869999  291.059998  45.740002  \n",
              "2022-10-28  329.470001  36.180000  298.649994  47.430000  \n",
              "2022-10-31  328.179993  36.040001  296.130005  46.549999  \n",
              "2022-11-01  333.190002  36.200001  296.059998  48.009998  \n",
              "2022-11-02  319.820007  36.090000  288.730011  47.070000  \n",
              "\n",
              "[1258 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-378bb1e6-ec00-4706-9e58-f7bb9b3c8315\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UNH</th>\n",
              "      <th>XOM</th>\n",
              "      <th>JNJ</th>\n",
              "      <th>V</th>\n",
              "      <th>JPM</th>\n",
              "      <th>WMT</th>\n",
              "      <th>CVX</th>\n",
              "      <th>LLY</th>\n",
              "      <th>TSM</th>\n",
              "      <th>PG</th>\n",
              "      <th>MA</th>\n",
              "      <th>BAC</th>\n",
              "      <th>HD</th>\n",
              "      <th>PFE</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2017-11-03</th>\n",
              "      <td>212.869995</td>\n",
              "      <td>83.180000</td>\n",
              "      <td>140.080002</td>\n",
              "      <td>111.360001</td>\n",
              "      <td>101.410004</td>\n",
              "      <td>89.680000</td>\n",
              "      <td>114.989998</td>\n",
              "      <td>83.510002</td>\n",
              "      <td>42.189999</td>\n",
              "      <td>86.580002</td>\n",
              "      <td>149.289993</td>\n",
              "      <td>27.820000</td>\n",
              "      <td>164.389999</td>\n",
              "      <td>33.728653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-06</th>\n",
              "      <td>212.119995</td>\n",
              "      <td>83.750000</td>\n",
              "      <td>139.759995</td>\n",
              "      <td>111.919998</td>\n",
              "      <td>100.779999</td>\n",
              "      <td>88.699997</td>\n",
              "      <td>117.040001</td>\n",
              "      <td>82.940002</td>\n",
              "      <td>42.430000</td>\n",
              "      <td>86.050003</td>\n",
              "      <td>150.089996</td>\n",
              "      <td>27.750000</td>\n",
              "      <td>164.220001</td>\n",
              "      <td>33.510437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-07</th>\n",
              "      <td>212.699997</td>\n",
              "      <td>83.580002</td>\n",
              "      <td>139.770004</td>\n",
              "      <td>112.089996</td>\n",
              "      <td>98.750000</td>\n",
              "      <td>88.949997</td>\n",
              "      <td>117.239998</td>\n",
              "      <td>83.279999</td>\n",
              "      <td>42.509998</td>\n",
              "      <td>86.980003</td>\n",
              "      <td>149.970001</td>\n",
              "      <td>27.180000</td>\n",
              "      <td>163.660004</td>\n",
              "      <td>33.548386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-08</th>\n",
              "      <td>210.770004</td>\n",
              "      <td>83.470001</td>\n",
              "      <td>141.320007</td>\n",
              "      <td>112.470001</td>\n",
              "      <td>97.639999</td>\n",
              "      <td>90.260002</td>\n",
              "      <td>116.669998</td>\n",
              "      <td>84.010002</td>\n",
              "      <td>42.430000</td>\n",
              "      <td>87.580002</td>\n",
              "      <td>149.970001</td>\n",
              "      <td>26.790001</td>\n",
              "      <td>164.050003</td>\n",
              "      <td>33.529411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-09</th>\n",
              "      <td>211.559998</td>\n",
              "      <td>83.970001</td>\n",
              "      <td>140.350006</td>\n",
              "      <td>112.139999</td>\n",
              "      <td>97.629997</td>\n",
              "      <td>90.300003</td>\n",
              "      <td>117.239998</td>\n",
              "      <td>83.989998</td>\n",
              "      <td>41.639999</td>\n",
              "      <td>87.779999</td>\n",
              "      <td>149.289993</td>\n",
              "      <td>26.490000</td>\n",
              "      <td>163.270004</td>\n",
              "      <td>33.396584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-10-27</th>\n",
              "      <td>541.799988</td>\n",
              "      <td>107.550003</td>\n",
              "      <td>172.309998</td>\n",
              "      <td>204.289993</td>\n",
              "      <td>124.599998</td>\n",
              "      <td>140.729996</td>\n",
              "      <td>177.899994</td>\n",
              "      <td>356.329987</td>\n",
              "      <td>60.950001</td>\n",
              "      <td>131.880005</td>\n",
              "      <td>319.369995</td>\n",
              "      <td>35.869999</td>\n",
              "      <td>291.059998</td>\n",
              "      <td>45.740002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-10-28</th>\n",
              "      <td>551.239990</td>\n",
              "      <td>110.699997</td>\n",
              "      <td>174.869995</td>\n",
              "      <td>209.339996</td>\n",
              "      <td>126.080002</td>\n",
              "      <td>142.509995</td>\n",
              "      <td>179.979996</td>\n",
              "      <td>359.899994</td>\n",
              "      <td>62.009998</td>\n",
              "      <td>135.220001</td>\n",
              "      <td>329.470001</td>\n",
              "      <td>36.180000</td>\n",
              "      <td>298.649994</td>\n",
              "      <td>47.430000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-10-31</th>\n",
              "      <td>555.150024</td>\n",
              "      <td>110.809998</td>\n",
              "      <td>173.970001</td>\n",
              "      <td>207.160004</td>\n",
              "      <td>125.879997</td>\n",
              "      <td>142.330002</td>\n",
              "      <td>180.899994</td>\n",
              "      <td>362.089996</td>\n",
              "      <td>61.549999</td>\n",
              "      <td>134.669998</td>\n",
              "      <td>328.179993</td>\n",
              "      <td>36.040001</td>\n",
              "      <td>296.130005</td>\n",
              "      <td>46.549999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-01</th>\n",
              "      <td>547.309998</td>\n",
              "      <td>111.910004</td>\n",
              "      <td>173.089996</td>\n",
              "      <td>206.929993</td>\n",
              "      <td>128.149994</td>\n",
              "      <td>141.690002</td>\n",
              "      <td>182.220001</td>\n",
              "      <td>352.579987</td>\n",
              "      <td>61.580002</td>\n",
              "      <td>134.880005</td>\n",
              "      <td>333.190002</td>\n",
              "      <td>36.200001</td>\n",
              "      <td>296.059998</td>\n",
              "      <td>48.009998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-11-02</th>\n",
              "      <td>543.429993</td>\n",
              "      <td>109.610001</td>\n",
              "      <td>170.429993</td>\n",
              "      <td>200.949997</td>\n",
              "      <td>126.970001</td>\n",
              "      <td>140.750000</td>\n",
              "      <td>178.500000</td>\n",
              "      <td>354.959991</td>\n",
              "      <td>60.520000</td>\n",
              "      <td>132.940002</td>\n",
              "      <td>319.820007</td>\n",
              "      <td>36.090000</td>\n",
              "      <td>288.730011</td>\n",
              "      <td>47.070000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1258 rows × 14 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-378bb1e6-ec00-4706-9e58-f7bb9b3c8315')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-378bb1e6-ec00-4706-9e58-f7bb9b3c8315 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-378bb1e6-ec00-4706-9e58-f7bb9b3c8315');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pypfopt.expected_returns import mean_historical_return\n",
        "from pypfopt.risk_models import CovarianceShrinkage"
      ],
      "metadata": {
        "id": "0C9RBRUZD5ke"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mu = mean_historical_return(close_price_dfs_combined)\n",
        "S = CovarianceShrinkage(close_price_dfs_combined).ledoit_wolf()"
      ],
      "metadata": {
        "id": "PqAuvs7SECK-"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mu"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HlZInfsvEqFI",
        "outputId": "13706bef-fbf4-43be-e577-bed5b31cd24f"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "UNH    0.206702\n",
              "XOM    0.056875\n",
              "JNJ    0.040099\n",
              "V      0.125626\n",
              "JPM    0.046094\n",
              "WMT    0.094571\n",
              "CVX    0.092161\n",
              "LLY    0.336559\n",
              "TSM    0.075010\n",
              "PG     0.089774\n",
              "MA     0.165019\n",
              "BAC    0.053562\n",
              "HD     0.119541\n",
              "PFE    0.069100\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "S"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "QKiswJl7HsPA",
        "outputId": "9cf9337b-1082-43a6-9e0c-b1266925cc4e"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          UNH       XOM       JNJ         V       JPM       WMT       CVX  \\\n",
              "UNH  0.087667  0.039875  0.032185  0.046318  0.047435  0.024161  0.050729   \n",
              "XOM  0.039875  0.112916  0.022661  0.046161  0.063492  0.016594  0.097681   \n",
              "JNJ  0.032185  0.022661  0.044655  0.027523  0.027970  0.020294  0.027905   \n",
              "V    0.046318  0.046161  0.027523  0.085105  0.056739  0.020529  0.053895   \n",
              "JPM  0.047435  0.063492  0.027970  0.056739  0.102468  0.020438  0.071592   \n",
              "WMT  0.024161  0.016594  0.020294  0.020529  0.020438  0.057228  0.017392   \n",
              "CVX  0.050729  0.097681  0.027905  0.053895  0.071592  0.017392  0.124706   \n",
              "LLY  0.039551  0.027345  0.033165  0.030727  0.027150  0.022859  0.029472   \n",
              "TSM  0.037569  0.039582  0.019564  0.048699  0.047594  0.020007  0.046694   \n",
              "PG   0.029177  0.018130  0.026489  0.027562  0.026275  0.025950  0.020352   \n",
              "MA   0.049853  0.052469  0.029293  0.085781  0.062844  0.022375  0.058869   \n",
              "BAC  0.051587  0.072057  0.029894  0.061953  0.102683  0.023061  0.078500   \n",
              "HD   0.043972  0.034063  0.025506  0.047521  0.048497  0.028215  0.044866   \n",
              "PFE  0.034017  0.025493  0.029274  0.030664  0.032180  0.018805  0.028929   \n",
              "\n",
              "          LLY       TSM        PG        MA       BAC        HD       PFE  \n",
              "UNH  0.039551  0.037569  0.029177  0.049853  0.051587  0.043972  0.034017  \n",
              "XOM  0.027345  0.039582  0.018130  0.052469  0.072057  0.034063  0.025493  \n",
              "JNJ  0.033165  0.019564  0.026489  0.029293  0.029894  0.025506  0.029274  \n",
              "V    0.030727  0.048699  0.027562  0.085781  0.061953  0.047521  0.030664  \n",
              "JPM  0.027150  0.047594  0.026275  0.062844  0.102683  0.048497  0.032180  \n",
              "WMT  0.022859  0.020007  0.025950  0.022375  0.023061  0.028215  0.018805  \n",
              "CVX  0.029472  0.046694  0.020352  0.058869  0.078500  0.044866  0.028929  \n",
              "LLY  0.088752  0.023607  0.026164  0.032144  0.029921  0.030788  0.038730  \n",
              "TSM  0.023607  0.116819  0.018953  0.053863  0.052053  0.043371  0.017830  \n",
              "PG   0.026164  0.018953  0.048854  0.029457  0.028630  0.029495  0.024109  \n",
              "MA   0.032144  0.053863  0.029457  0.107915  0.068168  0.051098  0.032471  \n",
              "BAC  0.029921  0.052053  0.028630  0.068168  0.124158  0.050561  0.033552  \n",
              "HD   0.030788  0.043371  0.029495  0.051098  0.050561  0.080308  0.026472  \n",
              "PFE  0.038730  0.017830  0.024109  0.032471  0.033552  0.026472  0.068607  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-582be19f-1248-4cf6-9258-e9d6017592e8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>UNH</th>\n",
              "      <th>XOM</th>\n",
              "      <th>JNJ</th>\n",
              "      <th>V</th>\n",
              "      <th>JPM</th>\n",
              "      <th>WMT</th>\n",
              "      <th>CVX</th>\n",
              "      <th>LLY</th>\n",
              "      <th>TSM</th>\n",
              "      <th>PG</th>\n",
              "      <th>MA</th>\n",
              "      <th>BAC</th>\n",
              "      <th>HD</th>\n",
              "      <th>PFE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>UNH</th>\n",
              "      <td>0.087667</td>\n",
              "      <td>0.039875</td>\n",
              "      <td>0.032185</td>\n",
              "      <td>0.046318</td>\n",
              "      <td>0.047435</td>\n",
              "      <td>0.024161</td>\n",
              "      <td>0.050729</td>\n",
              "      <td>0.039551</td>\n",
              "      <td>0.037569</td>\n",
              "      <td>0.029177</td>\n",
              "      <td>0.049853</td>\n",
              "      <td>0.051587</td>\n",
              "      <td>0.043972</td>\n",
              "      <td>0.034017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>XOM</th>\n",
              "      <td>0.039875</td>\n",
              "      <td>0.112916</td>\n",
              "      <td>0.022661</td>\n",
              "      <td>0.046161</td>\n",
              "      <td>0.063492</td>\n",
              "      <td>0.016594</td>\n",
              "      <td>0.097681</td>\n",
              "      <td>0.027345</td>\n",
              "      <td>0.039582</td>\n",
              "      <td>0.018130</td>\n",
              "      <td>0.052469</td>\n",
              "      <td>0.072057</td>\n",
              "      <td>0.034063</td>\n",
              "      <td>0.025493</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>JNJ</th>\n",
              "      <td>0.032185</td>\n",
              "      <td>0.022661</td>\n",
              "      <td>0.044655</td>\n",
              "      <td>0.027523</td>\n",
              "      <td>0.027970</td>\n",
              "      <td>0.020294</td>\n",
              "      <td>0.027905</td>\n",
              "      <td>0.033165</td>\n",
              "      <td>0.019564</td>\n",
              "      <td>0.026489</td>\n",
              "      <td>0.029293</td>\n",
              "      <td>0.029894</td>\n",
              "      <td>0.025506</td>\n",
              "      <td>0.029274</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>V</th>\n",
              "      <td>0.046318</td>\n",
              "      <td>0.046161</td>\n",
              "      <td>0.027523</td>\n",
              "      <td>0.085105</td>\n",
              "      <td>0.056739</td>\n",
              "      <td>0.020529</td>\n",
              "      <td>0.053895</td>\n",
              "      <td>0.030727</td>\n",
              "      <td>0.048699</td>\n",
              "      <td>0.027562</td>\n",
              "      <td>0.085781</td>\n",
              "      <td>0.061953</td>\n",
              "      <td>0.047521</td>\n",
              "      <td>0.030664</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>JPM</th>\n",
              "      <td>0.047435</td>\n",
              "      <td>0.063492</td>\n",
              "      <td>0.027970</td>\n",
              "      <td>0.056739</td>\n",
              "      <td>0.102468</td>\n",
              "      <td>0.020438</td>\n",
              "      <td>0.071592</td>\n",
              "      <td>0.027150</td>\n",
              "      <td>0.047594</td>\n",
              "      <td>0.026275</td>\n",
              "      <td>0.062844</td>\n",
              "      <td>0.102683</td>\n",
              "      <td>0.048497</td>\n",
              "      <td>0.032180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WMT</th>\n",
              "      <td>0.024161</td>\n",
              "      <td>0.016594</td>\n",
              "      <td>0.020294</td>\n",
              "      <td>0.020529</td>\n",
              "      <td>0.020438</td>\n",
              "      <td>0.057228</td>\n",
              "      <td>0.017392</td>\n",
              "      <td>0.022859</td>\n",
              "      <td>0.020007</td>\n",
              "      <td>0.025950</td>\n",
              "      <td>0.022375</td>\n",
              "      <td>0.023061</td>\n",
              "      <td>0.028215</td>\n",
              "      <td>0.018805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CVX</th>\n",
              "      <td>0.050729</td>\n",
              "      <td>0.097681</td>\n",
              "      <td>0.027905</td>\n",
              "      <td>0.053895</td>\n",
              "      <td>0.071592</td>\n",
              "      <td>0.017392</td>\n",
              "      <td>0.124706</td>\n",
              "      <td>0.029472</td>\n",
              "      <td>0.046694</td>\n",
              "      <td>0.020352</td>\n",
              "      <td>0.058869</td>\n",
              "      <td>0.078500</td>\n",
              "      <td>0.044866</td>\n",
              "      <td>0.028929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LLY</th>\n",
              "      <td>0.039551</td>\n",
              "      <td>0.027345</td>\n",
              "      <td>0.033165</td>\n",
              "      <td>0.030727</td>\n",
              "      <td>0.027150</td>\n",
              "      <td>0.022859</td>\n",
              "      <td>0.029472</td>\n",
              "      <td>0.088752</td>\n",
              "      <td>0.023607</td>\n",
              "      <td>0.026164</td>\n",
              "      <td>0.032144</td>\n",
              "      <td>0.029921</td>\n",
              "      <td>0.030788</td>\n",
              "      <td>0.038730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TSM</th>\n",
              "      <td>0.037569</td>\n",
              "      <td>0.039582</td>\n",
              "      <td>0.019564</td>\n",
              "      <td>0.048699</td>\n",
              "      <td>0.047594</td>\n",
              "      <td>0.020007</td>\n",
              "      <td>0.046694</td>\n",
              "      <td>0.023607</td>\n",
              "      <td>0.116819</td>\n",
              "      <td>0.018953</td>\n",
              "      <td>0.053863</td>\n",
              "      <td>0.052053</td>\n",
              "      <td>0.043371</td>\n",
              "      <td>0.017830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PG</th>\n",
              "      <td>0.029177</td>\n",
              "      <td>0.018130</td>\n",
              "      <td>0.026489</td>\n",
              "      <td>0.027562</td>\n",
              "      <td>0.026275</td>\n",
              "      <td>0.025950</td>\n",
              "      <td>0.020352</td>\n",
              "      <td>0.026164</td>\n",
              "      <td>0.018953</td>\n",
              "      <td>0.048854</td>\n",
              "      <td>0.029457</td>\n",
              "      <td>0.028630</td>\n",
              "      <td>0.029495</td>\n",
              "      <td>0.024109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MA</th>\n",
              "      <td>0.049853</td>\n",
              "      <td>0.052469</td>\n",
              "      <td>0.029293</td>\n",
              "      <td>0.085781</td>\n",
              "      <td>0.062844</td>\n",
              "      <td>0.022375</td>\n",
              "      <td>0.058869</td>\n",
              "      <td>0.032144</td>\n",
              "      <td>0.053863</td>\n",
              "      <td>0.029457</td>\n",
              "      <td>0.107915</td>\n",
              "      <td>0.068168</td>\n",
              "      <td>0.051098</td>\n",
              "      <td>0.032471</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BAC</th>\n",
              "      <td>0.051587</td>\n",
              "      <td>0.072057</td>\n",
              "      <td>0.029894</td>\n",
              "      <td>0.061953</td>\n",
              "      <td>0.102683</td>\n",
              "      <td>0.023061</td>\n",
              "      <td>0.078500</td>\n",
              "      <td>0.029921</td>\n",
              "      <td>0.052053</td>\n",
              "      <td>0.028630</td>\n",
              "      <td>0.068168</td>\n",
              "      <td>0.124158</td>\n",
              "      <td>0.050561</td>\n",
              "      <td>0.033552</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HD</th>\n",
              "      <td>0.043972</td>\n",
              "      <td>0.034063</td>\n",
              "      <td>0.025506</td>\n",
              "      <td>0.047521</td>\n",
              "      <td>0.048497</td>\n",
              "      <td>0.028215</td>\n",
              "      <td>0.044866</td>\n",
              "      <td>0.030788</td>\n",
              "      <td>0.043371</td>\n",
              "      <td>0.029495</td>\n",
              "      <td>0.051098</td>\n",
              "      <td>0.050561</td>\n",
              "      <td>0.080308</td>\n",
              "      <td>0.026472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>PFE</th>\n",
              "      <td>0.034017</td>\n",
              "      <td>0.025493</td>\n",
              "      <td>0.029274</td>\n",
              "      <td>0.030664</td>\n",
              "      <td>0.032180</td>\n",
              "      <td>0.018805</td>\n",
              "      <td>0.028929</td>\n",
              "      <td>0.038730</td>\n",
              "      <td>0.017830</td>\n",
              "      <td>0.024109</td>\n",
              "      <td>0.032471</td>\n",
              "      <td>0.033552</td>\n",
              "      <td>0.026472</td>\n",
              "      <td>0.068607</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-582be19f-1248-4cf6-9258-e9d6017592e8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-582be19f-1248-4cf6-9258-e9d6017592e8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-582be19f-1248-4cf6-9258-e9d6017592e8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pypfopt.efficient_frontier import EfficientFrontier"
      ],
      "metadata": {
        "id": "lWNSqC4rHszc"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ef = EfficientFrontier(mu, S)\n",
        "weights = ef.max_sharpe()"
      ],
      "metadata": {
        "id": "VbAwbFP-Hvum"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cleaned_weights = ef.clean_weights()\n",
        "print(cleaned_weights)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FFmpNnTnH54Q",
        "outputId": "b73c7d98-00d3-4711-8cdd-ffaffdcb348e"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OrderedDict([('UNH', 0.15266), ('XOM', 0.0), ('JNJ', 0.0), ('V', 0.0), ('JPM', 0.0), ('WMT', 0.0), ('CVX', 0.0), ('LLY', 0.82404), ('TSM', 0.0), ('PG', 0.0), ('MA', 0.0233), ('BAC', 0.0), ('HD', 0.0), ('PFE', 0.0)])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ZUUHVWWaZ3pN"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
